{"mappings":"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","sources":["node_modules/src/utils/typeOf.js","node_modules/src/utils/isEmpty.js","node_modules/src/utils/isCharInRange.js","node_modules/src/constants.js","node_modules/node_modules/memoize-one/dist/memoize-one.esm.js","node_modules/node_modules/dequal/dist/index.mjs","node_modules/src/utils/mergeWithDefaultOptions.js","node_modules/src/utils/kanaMapping.js","node_modules/src/utils/romajiToKanaMap.js","node_modules/src/utils/isCharUpperCase.js","node_modules/src/utils/isCharLongDash.js","node_modules/src/utils/isCharSlashDot.js","node_modules/src/utils/isCharHiragana.js","node_modules/src/utils/hiraganaToKatakana.js","node_modules/src/toKana.js","node_modules/src/utils/isCharRomaji.js","node_modules/src/isRomaji.js","node_modules/src/utils/isCharKatakana.js","node_modules/src/isHiragana.js","node_modules/src/isKatakana.js","node_modules/src/utils/isCharKanji.js","node_modules/src/isKanji.js","node_modules/src/isMixed.js","node_modules/src/utils/katakanaToHiragana.js","node_modules/src/utils/kanaToRomajiMap.js","node_modules/src/toRomaji.js","node_modules/src/utils/isCharEnglishPunctuation.js","node_modules/src/toHiragana.js","node_modules/src/toKatakana.js","src/data.js","src/shuffle.js","src/checkAnswer.js","src/app.js"],"sourcesContent":["/**\n * Returns detailed type as string (instead of just 'object' for arrays etc)\n * @private\n * @param {any} value js value\n * @returns {String} type of value\n * @example\n * typeOf({}); // 'object'\n * typeOf([]); // 'array'\n * typeOf(function() {}); // 'function'\n * typeOf(/a/); // 'regexp'\n * typeOf(new Date()); // 'date'\n * typeOf(null); // 'null'\n * typeOf(undefined); // 'undefined'\n * typeOf('a'); // 'string'\n * typeOf(1); // 'number'\n * typeOf(true); // 'boolean'\n * typeOf(new Map()); // 'map'\n * typeOf(new Set()); // 'map'\n */\nfunction typeOf(value) {\n  if (value === null) {\n    return 'null';\n  }\n  if (value !== Object(value)) {\n    return typeof value;\n  }\n  return {}.toString\n    .call(value)\n    .slice(8, -1)\n    .toLowerCase();\n}\n\nexport default typeOf;\n","import typeOf from './typeOf';\n/**\n * Checks if input string is empty\n * @param  {String} input text input\n * @return {Boolean} true if no input\n */\nfunction isEmpty(input) {\n  if (typeOf(input) !== 'string') {\n    return true;\n  }\n  return !input.length;\n}\n\nexport default isEmpty;\n","import isEmpty from './isEmpty';\n\n/**\n * Takes a character and a unicode range. Returns true if the char is in the range.\n * @param  {String}  char  unicode character\n * @param  {Number}  start unicode start range\n * @param  {Number}  end   unicode end range\n * @return {Boolean}\n */\nfunction isCharInRange(char = '', start, end) {\n  if (isEmpty(char)) return false;\n  const code = char.charCodeAt(0);\n  return start <= code && code <= end;\n}\n\nexport default isCharInRange;\n","export const VERSION = '5.0.2';\n\nexport const TO_KANA_METHODS = {\n  HIRAGANA: 'toHiragana',\n  KATAKANA: 'toKatakana',\n};\n\nexport const ROMANIZATIONS = {\n  HEPBURN: 'hepburn',\n};\n\n/**\n * Default config for WanaKana, user passed options will be merged with these\n * @type {DefaultOptions}\n * @name defaultOptions\n * @property {Boolean} [useObsoleteKana=false] - Set to true to use obsolete characters, such as ゐ and ゑ.\n * @example\n * toHiragana('we', { useObsoleteKana: true })\n * // => 'ゑ'\n * @property {Boolean} [passRomaji=false] - Set to true to pass romaji when using mixed syllabaries with toKatakana() or toHiragana()\n * @example\n * toHiragana('only convert the katakana: ヒラガナ', { passRomaji: true })\n * // => \"only convert the katakana: ひらがな\"\n * @property {Object} [convertLongVowelMark=true] - Set to false to prevent conversions of 'ー' to extended vowels with toHiragana()\n * @example\n * toHiragana('ラーメン', { convertLongVowelMark: false });\n * // => 'らーめん\n * @property {Boolean} [upcaseKatakana=false] - Set to true to convert katakana to uppercase using toRomaji()\n * @example\n * toRomaji('ひらがな カタカナ', { upcaseKatakana: true })\n * // => \"hiragana KATAKANA\"\n * @property {Boolean|String} [IMEMode=false] - Set to true, 'toHiragana', or 'toKatakana' to handle conversion while it is being typed.\n * @property {String} [romanization='hepburn'] - choose toRomaji() romanization map (currently only 'hepburn')\n * @property {Object} [customKanaMapping] - custom map will be merged with default conversion\n * @example\n * toKana('wanakana', { customKanaMapping: { na: 'に', ka: 'Bana' }) };\n * // => 'わにBanaに'\n * @property {Object} [customRomajiMapping] - custom map will be merged with default conversion\n * @example\n * toRomaji('つじぎり', { customRomajiMapping: { じ: 'zi', つ: 'tu', り: 'li' }) };\n * // => 'tuzigili'\n */\nexport const DEFAULT_OPTIONS = {\n  useObsoleteKana: false,\n  passRomaji: false,\n  upcaseKatakana: false,\n  IMEMode: false,\n  convertLongVowelMark: true,\n  romanization: ROMANIZATIONS.HEPBURN,\n};\n\n// CharCode References\n// http://www.rikai.com/library/kanjitables/kanji_codes.unicode.shtml\n// http://unicode-table.com\n\nexport const LATIN_LOWERCASE_START = 0x61;\nexport const LATIN_LOWERCASE_END = 0x7a;\nexport const LATIN_UPPERCASE_START = 0x41;\nexport const LATIN_UPPERCASE_END = 0x5a;\nexport const LOWERCASE_ZENKAKU_START = 0xff41;\nexport const LOWERCASE_ZENKAKU_END = 0xff5a;\nexport const UPPERCASE_ZENKAKU_START = 0xff21;\nexport const UPPERCASE_ZENKAKU_END = 0xff3a;\nexport const HIRAGANA_START = 0x3041;\nexport const HIRAGANA_END = 0x3096;\nexport const KATAKANA_START = 0x30a1;\nexport const KATAKANA_END = 0x30fc;\nexport const KANJI_START = 0x4e00;\nexport const KANJI_END = 0x9faf;\nexport const PROLONGED_SOUND_MARK = 0x30fc;\nexport const KANA_SLASH_DOT = 0x30fb;\n\nconst ZENKAKU_NUMBERS = [0xff10, 0xff19];\nconst ZENKAKU_UPPERCASE = [UPPERCASE_ZENKAKU_START, UPPERCASE_ZENKAKU_END];\nconst ZENKAKU_LOWERCASE = [LOWERCASE_ZENKAKU_START, LOWERCASE_ZENKAKU_END];\nconst ZENKAKU_PUNCTUATION_1 = [0xff01, 0xff0f];\nconst ZENKAKU_PUNCTUATION_2 = [0xff1a, 0xff1f];\nconst ZENKAKU_PUNCTUATION_3 = [0xff3b, 0xff3f];\nconst ZENKAKU_PUNCTUATION_4 = [0xff5b, 0xff60];\nconst ZENKAKU_SYMBOLS_CURRENCY = [0xffe0, 0xffee];\n\nconst HIRAGANA_CHARS = [0x3040, 0x309f];\nconst KATAKANA_CHARS = [0x30a0, 0x30ff];\nconst HANKAKU_KATAKANA = [0xff66, 0xff9f];\nconst KATAKANA_PUNCTUATION = [0x30fb, 0x30fc];\nconst KANA_PUNCTUATION = [0xff61, 0xff65];\nconst CJK_SYMBOLS_PUNCTUATION = [0x3000, 0x303f];\nconst COMMON_CJK = [0x4e00, 0x9fff];\nconst RARE_CJK = [0x3400, 0x4dbf];\n\nexport const KANA_RANGES = [\n  HIRAGANA_CHARS,\n  KATAKANA_CHARS,\n  KANA_PUNCTUATION,\n  HANKAKU_KATAKANA,\n];\n\nexport const JA_PUNCTUATION_RANGES = [\n  CJK_SYMBOLS_PUNCTUATION,\n  KANA_PUNCTUATION,\n  KATAKANA_PUNCTUATION,\n  ZENKAKU_PUNCTUATION_1,\n  ZENKAKU_PUNCTUATION_2,\n  ZENKAKU_PUNCTUATION_3,\n  ZENKAKU_PUNCTUATION_4,\n  ZENKAKU_SYMBOLS_CURRENCY,\n];\n\n// All Japanese unicode start and end ranges\n// Includes kanji, kana, zenkaku latin chars, punctuation, and number ranges.\nexport const JAPANESE_RANGES = [\n  ...KANA_RANGES,\n  ...JA_PUNCTUATION_RANGES,\n  ZENKAKU_UPPERCASE,\n  ZENKAKU_LOWERCASE,\n  ZENKAKU_NUMBERS,\n  COMMON_CJK,\n  RARE_CJK,\n];\n\nconst MODERN_ENGLISH = [0x0000, 0x007f];\nconst HEPBURN_MACRON_RANGES = [\n  [0x0100, 0x0101], // Ā ā\n  [0x0112, 0x0113], // Ē ē\n  [0x012a, 0x012b], // Ī ī\n  [0x014c, 0x014d], // Ō ō\n  [0x016a, 0x016b], // Ū ū\n];\nconst SMART_QUOTE_RANGES = [\n  [0x2018, 0x2019], // ‘ ’\n  [0x201c, 0x201d], // “ ”\n];\n\nexport const ROMAJI_RANGES = [MODERN_ENGLISH, ...HEPBURN_MACRON_RANGES];\n\nexport const EN_PUNCTUATION_RANGES = [\n  [0x20, 0x2f],\n  [0x3a, 0x3f],\n  [0x5b, 0x60],\n  [0x7b, 0x7e],\n  ...SMART_QUOTE_RANGES,\n];\n","var safeIsNaN = Number.isNaN ||\n    function ponyfill(value) {\n        return typeof value === 'number' && value !== value;\n    };\nfunction isEqual(first, second) {\n    if (first === second) {\n        return true;\n    }\n    if (safeIsNaN(first) && safeIsNaN(second)) {\n        return true;\n    }\n    return false;\n}\nfunction areInputsEqual(newInputs, lastInputs) {\n    if (newInputs.length !== lastInputs.length) {\n        return false;\n    }\n    for (var i = 0; i < newInputs.length; i++) {\n        if (!isEqual(newInputs[i], lastInputs[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction memoizeOne(resultFn, isEqual) {\n    if (isEqual === void 0) { isEqual = areInputsEqual; }\n    var cache = null;\n    function memoized() {\n        var newArgs = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            newArgs[_i] = arguments[_i];\n        }\n        if (cache && cache.lastThis === this && isEqual(newArgs, cache.lastArgs)) {\n            return cache.lastResult;\n        }\n        var lastResult = resultFn.apply(this, newArgs);\n        cache = {\n            lastResult: lastResult,\n            lastArgs: newArgs,\n            lastThis: this,\n        };\n        return lastResult;\n    }\n    memoized.clear = function clear() {\n        cache = null;\n    };\n    return memoized;\n}\n\nexport { memoizeOne as default };\n","var has = Object.prototype.hasOwnProperty;\n\nfunction find(iter, tar, key) {\n\tfor (key of iter.keys()) {\n\t\tif (dequal(key, tar)) return key;\n\t}\n}\n\nexport function dequal(foo, bar) {\n\tvar ctor, len, tmp;\n\tif (foo === bar) return true;\n\n\tif (foo && bar && (ctor=foo.constructor) === bar.constructor) {\n\t\tif (ctor === Date) return foo.getTime() === bar.getTime();\n\t\tif (ctor === RegExp) return foo.toString() === bar.toString();\n\n\t\tif (ctor === Array) {\n\t\t\tif ((len=foo.length) === bar.length) {\n\t\t\t\twhile (len-- && dequal(foo[len], bar[len]));\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (ctor === Set) {\n\t\t\tif (foo.size !== bar.size) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor (len of foo) {\n\t\t\t\ttmp = len;\n\t\t\t\tif (tmp && typeof tmp === 'object') {\n\t\t\t\t\ttmp = find(bar, tmp);\n\t\t\t\t\tif (!tmp) return false;\n\t\t\t\t}\n\t\t\t\tif (!bar.has(tmp)) return false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tif (ctor === Map) {\n\t\t\tif (foo.size !== bar.size) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor (len of foo) {\n\t\t\t\ttmp = len[0];\n\t\t\t\tif (tmp && typeof tmp === 'object') {\n\t\t\t\t\ttmp = find(bar, tmp);\n\t\t\t\t\tif (!tmp) return false;\n\t\t\t\t}\n\t\t\t\tif (!dequal(len[1], bar.get(tmp))) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tif (ctor === ArrayBuffer) {\n\t\t\tfoo = new Uint8Array(foo);\n\t\t\tbar = new Uint8Array(bar);\n\t\t} else if (ctor === DataView) {\n\t\t\tif ((len=foo.byteLength) === bar.byteLength) {\n\t\t\t\twhile (len-- && foo.getInt8(len) === bar.getInt8(len));\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (ArrayBuffer.isView(foo)) {\n\t\t\tif ((len=foo.byteLength) === bar.byteLength) {\n\t\t\t\twhile (len-- && foo[len] === bar[len]);\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (!ctor || typeof foo === 'object') {\n\t\t\tlen = 0;\n\t\t\tfor (ctor in foo) {\n\t\t\t\tif (has.call(foo, ctor) && ++len && !has.call(bar, ctor)) return false;\n\t\t\t\tif (!(ctor in bar) || !dequal(foo[ctor], bar[ctor])) return false;\n\t\t\t}\n\t\t\treturn Object.keys(bar).length === len;\n\t\t}\n\t}\n\n\treturn foo !== foo && bar !== bar;\n}\n","import { DEFAULT_OPTIONS } from '../constants';\n/**\n * Easy re-use of merging with default options\n * @param {Object} opts user options\n * @returns user options merged over default options\n */\nconst mergeWithDefaultOptions = (opts = {}) => Object.assign({}, DEFAULT_OPTIONS, opts);\n\nexport default mergeWithDefaultOptions;\n","import typeOf from './typeOf';\n\nexport function applyMapping(string, mapping, convertEnding) {\n  const root = mapping;\n\n  function nextSubtree(tree, nextChar) {\n    const subtree = tree[nextChar];\n    if (subtree === undefined) {\n      return undefined;\n    }\n    // if the next child node does not have a node value, set its node value to the input\n    return Object.assign({ '': tree[''] + nextChar }, tree[nextChar]);\n  }\n\n  function newChunk(remaining, currentCursor) {\n    // start parsing a new chunk\n    const firstChar = remaining.charAt(0);\n\n    return parse(\n      Object.assign({ '': firstChar }, root[firstChar]),\n      remaining.slice(1),\n      currentCursor,\n      currentCursor + 1\n    );\n  }\n\n  function parse(tree, remaining, lastCursor, currentCursor) {\n    if (!remaining) {\n      if (convertEnding || Object.keys(tree).length === 1) {\n        // nothing more to consume, just commit the last chunk and return it\n        // so as to not have an empty element at the end of the result\n        return tree[''] ? [[lastCursor, currentCursor, tree['']]] : [];\n      }\n      // if we don't want to convert the ending, because there are still possible continuations\n      // return null as the final node value\n      return [[lastCursor, currentCursor, null]];\n    }\n\n    if (Object.keys(tree).length === 1) {\n      return [[lastCursor, currentCursor, tree['']]].concat(\n        newChunk(remaining, currentCursor)\n      );\n    }\n\n    const subtree = nextSubtree(tree, remaining.charAt(0));\n\n    if (subtree === undefined) {\n      return [[lastCursor, currentCursor, tree['']]].concat(\n        newChunk(remaining, currentCursor)\n      );\n    }\n    // continue current branch\n    return parse(subtree, remaining.slice(1), lastCursor, currentCursor + 1);\n  }\n\n  return newChunk(string, 0);\n}\n\n// transform the tree, so that for example hepburnTree['ゔ']['ぁ'][''] === 'va'\n// or kanaTree['k']['y']['a'][''] === 'きゃ'\nexport function transform(tree) {\n  return Object.entries(tree).reduce((map, [char, subtree]) => {\n    const endOfBranch = typeOf(subtree) === 'string';\n    // eslint-disable-next-line no-param-reassign\n    map[char] = endOfBranch ? { '': subtree } : transform(subtree);\n    return map;\n  }, {});\n}\n\nexport function getSubTreeOf(tree, string) {\n  return string.split('').reduce((correctSubTree, char) => {\n    if (correctSubTree[char] === undefined) {\n      // eslint-disable-next-line no-param-reassign\n      correctSubTree[char] = {};\n    }\n    return correctSubTree[char];\n  }, tree);\n}\n\n/**\n * Creates a custom mapping tree, returns a function that accepts a defaultMap which the newly created customMapping will be merged with and returned\n * (customMap) => (defaultMap) => mergedMap\n * @param  {Object} customMap { 'ka' : 'な' }\n * @return {Function} (defaultMap) => defaultMergedWithCustomMap\n * @example\n * const sillyMap = createCustomMapping({ 'ちゃ': 'time', '茎': 'cookie'　});\n * // sillyMap is passed defaultMapping to merge with when called in toRomaji()\n * toRomaji(\"It's 茎 ちゃ よ\", { customRomajiMapping: sillyMap });\n * // => 'It's cookie time yo';\n */\nexport function createCustomMapping(customMap = {}) {\n  const customTree = {};\n\n  if (typeOf(customMap) === 'object') {\n    Object.entries(customMap).forEach(([roma, kana]) => {\n      let subTree = customTree;\n      roma.split('').forEach((char) => {\n        if (subTree[char] === undefined) {\n          subTree[char] = {};\n        }\n        subTree = subTree[char];\n      });\n      subTree[''] = kana;\n    });\n  }\n\n  return function makeMap(map) {\n    const mapCopy = JSON.parse(JSON.stringify(map));\n\n    function transformMap(mapSubtree, customSubtree) {\n      if (mapSubtree === undefined || typeOf(mapSubtree) === 'string') {\n        return customSubtree;\n      }\n      return Object.entries(customSubtree).reduce(\n        (newSubtree, [char, subtree]) => {\n          // eslint-disable-next-line no-param-reassign\n          newSubtree[char] = transformMap(mapSubtree[char], subtree);\n          return newSubtree;\n        },\n        mapSubtree\n      );\n    }\n\n    return transformMap(mapCopy, customTree);\n  };\n}\n\n// allow consumer to pass either function or object as customMapping\nexport function mergeCustomMapping(map, customMapping) {\n  if (!customMapping) {\n    return map;\n  }\n  return typeOf(customMapping) === 'function'\n    ? customMapping(map)\n    : createCustomMapping(customMapping)(map);\n}\n","import { transform, getSubTreeOf, createCustomMapping } from './kanaMapping';\n\n// NOTE: not exactly kunrei shiki, for example ぢゃ -> dya instead of zya, to avoid name clashing\n/* eslint-disable */\n// prettier-ignore\nconst BASIC_KUNREI = {\n  a: 'あ', i: 'い', u: 'う', e: 'え', o: 'お',\n  k: { a: 'か', i: 'き', u: 'く', e: 'け', o: 'こ', },\n  s: { a: 'さ', i: 'し', u: 'す', e: 'せ', o: 'そ', },\n  t: { a: 'た', i: 'ち', u: 'つ', e: 'て', o: 'と', },\n  n: { a: 'な', i: 'に', u: 'ぬ', e: 'ね', o: 'の', },\n  h: { a: 'は', i: 'ひ', u: 'ふ', e: 'へ', o: 'ほ', },\n  m: { a: 'ま', i: 'み', u: 'む', e: 'め', o: 'も', },\n  y: { a: 'や', u: 'ゆ', o: 'よ' },\n  r: { a: 'ら', i: 'り', u: 'る', e: 'れ', o: 'ろ', },\n  w: { a: 'わ', i: 'ゐ', e: 'ゑ', o: 'を', },\n  g: { a: 'が', i: 'ぎ', u: 'ぐ', e: 'げ', o: 'ご', },\n  z: { a: 'ざ', i: 'じ', u: 'ず', e: 'ぜ', o: 'ぞ', },\n  d: { a: 'だ', i: 'ぢ', u: 'づ', e: 'で', o: 'ど', },\n  b: { a: 'ば', i: 'び', u: 'ぶ', e: 'べ', o: 'ぼ', },\n  p: { a: 'ぱ', i: 'ぴ', u: 'ぷ', e: 'ぺ', o: 'ぽ', },\n  v: { a: 'ゔぁ', i: 'ゔぃ', u: 'ゔ', e: 'ゔぇ', o: 'ゔぉ', },\n};\n\nconst SPECIAL_SYMBOLS = {\n  '.': '。',\n  ',': '、',\n  ':': '：',\n  '/': '・',\n  '!': '！',\n  '?': '？',\n  '~': '〜',\n  '-': 'ー',\n  '‘': '「',\n  '’': '」',\n  '“': '『',\n  '”': '』',\n  '[': '［',\n  ']': '］',\n  '(': '（',\n  ')': '）',\n  '{': '｛',\n  '}': '｝',\n};\n\nconst CONSONANTS = {\n  k: 'き',\n  s: 'し',\n  t: 'ち',\n  n: 'に',\n  h: 'ひ',\n  m: 'み',\n  r: 'り',\n  g: 'ぎ',\n  z: 'じ',\n  d: 'ぢ',\n  b: 'び',\n  p: 'ぴ',\n  v: 'ゔ',\n  q: 'く',\n  f: 'ふ',\n};\nconst SMALL_Y = { ya: 'ゃ', yi: 'ぃ', yu: 'ゅ', ye: 'ぇ', yo: 'ょ' };\nconst SMALL_VOWELS = { a: 'ぁ', i: 'ぃ', u: 'ぅ', e: 'ぇ', o: 'ぉ' };\n\n// typing one should be the same as having typed the other instead\nconst ALIASES = {\n  sh: 'sy', // sha -> sya\n  ch: 'ty', // cho -> tyo\n  cy: 'ty', // cyo -> tyo\n  chy: 'ty', // chyu -> tyu\n  shy: 'sy', // shya -> sya\n  j: 'zy', // ja -> zya\n  jy: 'zy', // jye -> zye\n\n  // exceptions to above rules\n  shi: 'si',\n  chi: 'ti',\n  tsu: 'tu',\n  ji: 'zi',\n  fu: 'hu',\n};\n\n// xtu -> っ\nconst SMALL_LETTERS = Object.assign(\n  {\n    tu: 'っ',\n    wa: 'ゎ',\n    ka: 'ヵ',\n    ke: 'ヶ',\n  },\n  SMALL_VOWELS,\n  SMALL_Y\n);\n\n// don't follow any notable patterns\nconst SPECIAL_CASES = {\n  yi: 'い',\n  wu: 'う',\n  ye: 'いぇ',\n  wi: 'うぃ',\n  we: 'うぇ',\n  kwa: 'くぁ',\n  whu: 'う',\n  // because it's not thya for てゃ but tha\n  // and tha is not てぁ, but てゃ\n  tha: 'てゃ',\n  thu: 'てゅ',\n  tho: 'てょ',\n  dha: 'でゃ',\n  dhu: 'でゅ',\n  dho: 'でょ',\n};\n\nconst AIUEO_CONSTRUCTIONS = {\n  wh: 'う',\n  kw: 'く',\n  qw: 'く',\n  q: 'く',\n  gw: 'ぐ',\n  sw: 'す',\n  ts: 'つ',\n  th: 'て',\n  tw: 'と',\n  dh: 'で',\n  dw: 'ど',\n  fw: 'ふ',\n  f: 'ふ',\n};\n\n/* eslint-enable */\nfunction createRomajiToKanaMap() {\n  const kanaTree = transform(BASIC_KUNREI);\n  // pseudo partial application\n  const subtreeOf = (string) => getSubTreeOf(kanaTree, string);\n\n  // add tya, sya, etc.\n  Object.entries(CONSONANTS).forEach(([consonant, yKana]) => {\n    Object.entries(SMALL_Y).forEach(([roma, kana]) => {\n      // for example kyo -> き + ょ\n      subtreeOf(consonant + roma)[''] = yKana + kana;\n    });\n  });\n\n  Object.entries(SPECIAL_SYMBOLS).forEach(([symbol, jsymbol]) => {\n    subtreeOf(symbol)[''] = jsymbol;\n  });\n\n  // things like うぃ, くぃ, etc.\n  Object.entries(AIUEO_CONSTRUCTIONS).forEach(([consonant, aiueoKana]) => {\n    Object.entries(SMALL_VOWELS).forEach(([vowel, kana]) => {\n      const subtree = subtreeOf(consonant + vowel);\n      subtree[''] = aiueoKana + kana;\n    });\n  });\n\n  // different ways to write ん\n  ['n', \"n'\", 'xn'].forEach((nChar) => {\n    subtreeOf(nChar)[''] = 'ん';\n  });\n\n  // c is equivalent to k, but not for chi, cha, etc. that's why we have to make a copy of k\n  kanaTree.c = JSON.parse(JSON.stringify(kanaTree.k));\n\n  Object.entries(ALIASES).forEach(([string, alternative]) => {\n    const allExceptLast = string.slice(0, string.length - 1);\n    const last = string.charAt(string.length - 1);\n    const parentTree = subtreeOf(allExceptLast);\n    // copy to avoid recursive containment\n    parentTree[last] = JSON.parse(JSON.stringify(subtreeOf(alternative)));\n  });\n\n  function getAlternatives(string) {\n    return [...Object.entries(ALIASES), ...[['c', 'k']]].reduce(\n      (list, [alt, roma]) => (string.startsWith(roma) ? list.concat(string.replace(roma, alt)) : list),\n      []\n    );\n  }\n\n  Object.entries(SMALL_LETTERS).forEach(([kunreiRoma, kana]) => {\n    const last = (char) => char.charAt(char.length - 1);\n    const allExceptLast = (chars) => chars.slice(0, chars.length - 1);\n    const xRoma = `x${kunreiRoma}`;\n    const xSubtree = subtreeOf(xRoma);\n    xSubtree[''] = kana;\n\n    // ltu -> xtu -> っ\n    const parentTree = subtreeOf(`l${allExceptLast(kunreiRoma)}`);\n    parentTree[last(kunreiRoma)] = xSubtree;\n\n    // ltsu -> ltu -> っ\n    getAlternatives(kunreiRoma).forEach((altRoma) => {\n      ['l', 'x'].forEach((prefix) => {\n        const altParentTree = subtreeOf(prefix + allExceptLast(altRoma));\n        altParentTree[last(altRoma)] = subtreeOf(prefix + kunreiRoma);\n      });\n    });\n  });\n\n  Object.entries(SPECIAL_CASES).forEach(([string, kana]) => {\n    subtreeOf(string)[''] = kana;\n  });\n\n  // add kka, tta, etc.\n  function addTsu(tree) {\n    return Object.entries(tree).reduce((tsuTree, [key, value]) => {\n      if (!key) {\n        // we have reached the bottom of this branch\n        // eslint-disable-next-line no-param-reassign\n        tsuTree[key] = `っ${value}`;\n      } else {\n        // more subtrees\n        // eslint-disable-next-line no-param-reassign\n        tsuTree[key] = addTsu(value);\n      }\n      return tsuTree;\n    }, {});\n  }\n  // have to explicitly name c here, because we made it a copy of k, not a reference\n  [...Object.keys(CONSONANTS), 'c', 'y', 'w', 'j'].forEach((consonant) => {\n    const subtree = kanaTree[consonant];\n    subtree[consonant] = addTsu(subtree);\n  });\n  // nn should not be っん\n  delete kanaTree.n.n;\n  // solidify the results, so that there there is referential transparency within the tree\n  return Object.freeze(JSON.parse(JSON.stringify(kanaTree)));\n}\n\nlet romajiToKanaMap = null;\n\nexport function getRomajiToKanaTree() {\n  if (romajiToKanaMap == null) {\n    romajiToKanaMap = createRomajiToKanaMap();\n  }\n  return romajiToKanaMap;\n}\n\nexport const USE_OBSOLETE_KANA_MAP = createCustomMapping({\n  wi: 'ゐ',\n  we: 'ゑ',\n});\n\nexport function IME_MODE_MAP(map) {\n  // in IME mode, we do not want to convert single ns\n  const mapCopy = JSON.parse(JSON.stringify(map));\n  mapCopy.n.n = { '': 'ん' };\n  mapCopy.n[' '] = { '': 'ん' };\n  return mapCopy;\n}\n","import isEmpty from './isEmpty';\nimport isCharInRange from './isCharInRange';\nimport { LATIN_UPPERCASE_START, LATIN_UPPERCASE_END } from '../constants';\n\n/**\n * Tests if char is in English unicode uppercase range\n * @param  {String} char\n * @return {Boolean}\n */\nfunction isCharUpperCase(char = '') {\n  if (isEmpty(char)) return false;\n  return isCharInRange(char, LATIN_UPPERCASE_START, LATIN_UPPERCASE_END);\n}\n\nexport default isCharUpperCase;\n","import isEmpty from './isEmpty';\nimport { PROLONGED_SOUND_MARK } from '../constants';\n\n/**\n * Returns true if char is 'ー'\n * @param  {String} char to test\n * @return {Boolean}\n */\nfunction isCharLongDash(char = '') {\n  if (isEmpty(char)) return false;\n  return char.charCodeAt(0) === PROLONGED_SOUND_MARK;\n}\n\nexport default isCharLongDash;\n","import isEmpty from './isEmpty';\nimport { KANA_SLASH_DOT } from '../constants';\n\n/**\n * Tests if char is '・'\n * @param  {String} char\n * @return {Boolean} true if '・'\n */\nfunction isCharSlashDot(char = '') {\n  if (isEmpty(char)) return false;\n  return char.charCodeAt(0) === KANA_SLASH_DOT;\n}\n\nexport default isCharSlashDot;\n","import isEmpty from './isEmpty';\nimport isCharLongDash from './isCharLongDash';\nimport isCharInRange from './isCharInRange';\nimport {\n  HIRAGANA_START,\n  HIRAGANA_END,\n} from '../constants';\n\n/**\n * Tests a character. Returns true if the character is [Hiragana](https://en.wikipedia.org/wiki/Hiragana).\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharHiragana(char = '') {\n  if (isEmpty(char)) return false;\n  if (isCharLongDash(char)) return true;\n  return isCharInRange(char, HIRAGANA_START, HIRAGANA_END);\n}\n\nexport default isCharHiragana;\n","import { KATAKANA_START, HIRAGANA_START } from '../constants';\n\nimport isCharLongDash from './isCharLongDash';\nimport isCharSlashDot from './isCharSlashDot';\nimport isCharHiragana from './isCharHiragana';\n\n/**\n * Convert [Hiragana](https://en.wikipedia.org/wiki/Hiragana) to [Katakana](https://en.wikipedia.org/wiki/Katakana)\n * Passes through any non-hiragana chars\n * @private\n * @param  {String} [input=''] text input\n * @return {String} converted text\n * @example\n * hiraganaToKatakana('ひらがな')\n * // => \"ヒラガナ\"\n * hiraganaToKatakana('ひらがな is a type of kana')\n * // => \"ヒラガナ is a type of kana\"\n */\nfunction hiraganaToKatakana(input = '') {\n  const kata = [];\n  input.split('').forEach((char) => {\n    // Short circuit to avoid incorrect codeshift for 'ー' and '・'\n    if (isCharLongDash(char) || isCharSlashDot(char)) {\n      kata.push(char);\n    } else if (isCharHiragana(char)) {\n      // Shift charcode.\n      const code = char.charCodeAt(0) + (KATAKANA_START - HIRAGANA_START);\n      const kataChar = String.fromCharCode(code);\n      kata.push(kataChar);\n    } else {\n      // Pass non-hiragana chars through\n      kata.push(char);\n    }\n  });\n  return kata.join('');\n}\n\nexport default hiraganaToKatakana;\n","import memoizeOne from 'memoize-one';\nimport { dequal } from 'dequal';\n\nimport { TO_KANA_METHODS } from './constants';\nimport mergeWithDefaultOptions from './utils/mergeWithDefaultOptions';\nimport {\n  getRomajiToKanaTree,\n  IME_MODE_MAP,\n  USE_OBSOLETE_KANA_MAP,\n} from './utils/romajiToKanaMap';\nimport { applyMapping, mergeCustomMapping } from './utils/kanaMapping';\nimport isCharUpperCase from './utils/isCharUpperCase';\nimport hiraganaToKatakana from './utils/hiraganaToKatakana';\n\n// memoize and deeply compare args so we only recreate when necessary\nexport const createRomajiToKanaMap = memoizeOne(\n  (IMEMode, useObsoleteKana, customKanaMapping) => {\n    let map = getRomajiToKanaTree();\n\n    map = IMEMode ? IME_MODE_MAP(map) : map;\n    map = useObsoleteKana ? USE_OBSOLETE_KANA_MAP(map) : map;\n\n    if (customKanaMapping) {\n      map = mergeCustomMapping(map, customKanaMapping);\n    }\n\n    return map;\n  },\n  dequal\n);\n\n/**\n * Convert [Romaji](https://en.wikipedia.org/wiki/Romaji) to [Kana](https://en.wikipedia.org/wiki/Kana), lowercase text will result in [Hiragana](https://en.wikipedia.org/wiki/Hiragana) and uppercase text will result in [Katakana](https://en.wikipedia.org/wiki/Katakana).\n * @param  {String} [input=''] text\n * @param  {DefaultOptions} [options=defaultOptions]\n * @return {String} converted text\n * @example\n * toKana('onaji BUTTSUUJI')\n * // => 'おなじ ブッツウジ'\n * toKana('ONAJI buttsuuji')\n * // => 'オナジ ぶっつうじ'\n * toKana('座禅‘zazen’スタイル')\n * // => '座禅「ざぜん」スタイル'\n * toKana('batsuge-mu')\n * // => 'ばつげーむ'\n * toKana('!?.:/,~-‘’“”[](){}') // Punctuation conversion\n * // => '！？。：・、〜ー「」『』［］（）｛｝'\n * toKana('we', { useObsoleteKana: true })\n * // => 'ゑ'\n * toKana('wanakana', { customKanaMapping: { na: 'に', ka: 'bana' } });\n * // => 'わにbanaに'\n */\nexport function toKana(input = '', options = {}, map) {\n  let config;\n  if (!map) {\n    config = mergeWithDefaultOptions(options);\n    map = createRomajiToKanaMap(\n      config.IMEMode,\n      config.useObsoleteKana,\n      config.customKanaMapping\n    );\n  } else {\n    config = options;\n  }\n\n  // throw away the substring index information and just concatenate all the kana\n  return splitIntoConvertedKana(input, config, map)\n    .map((kanaToken) => {\n      const [start, end, kana] = kanaToken;\n      if (kana === null) {\n        // haven't converted the end of the string, since we are in IME mode\n        return input.slice(start);\n      }\n      const enforceHiragana = config.IMEMode === TO_KANA_METHODS.HIRAGANA;\n      const enforceKatakana = config.IMEMode === TO_KANA_METHODS.KATAKANA\n        || [...input.slice(start, end)].every(isCharUpperCase);\n\n      return enforceHiragana || !enforceKatakana\n        ? kana\n        : hiraganaToKatakana(kana);\n    })\n    .join('');\n}\n\n/**\n *\n * @private\n * @param {String} [input=''] input text\n * @param {DefaultOptions} [options=defaultOptions] toKana options\n * @param {Object} [map] custom mapping\n * @returns {Array[]} [[start, end, token]]\n * @example\n * splitIntoConvertedKana('buttsuuji')\n * // => [[0, 2, 'ぶ'], [2, 6, 'っつ'], [6, 7, 'う'], [7, 9, 'じ']]\n */\nexport function splitIntoConvertedKana(input = '', options = {}, map) {\n  const { IMEMode, useObsoleteKana, customKanaMapping } = options;\n\n  if (!map) {\n    map = createRomajiToKanaMap(IMEMode, useObsoleteKana, customKanaMapping);\n  }\n\n  return applyMapping(input.toLowerCase(), map, !IMEMode);\n}\n\nexport default toKana;\n","import isEmpty from './isEmpty';\nimport isCharInRange from './isCharInRange';\nimport { ROMAJI_RANGES } from '../constants';\n\n/**\n * Tests a character. Returns true if the character is [Romaji](https://en.wikipedia.org/wiki/Romaji) (allowing [Hepburn romanisation](https://en.wikipedia.org/wiki/Hepburn_romanization))\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharRomaji(char = '') {\n  if (isEmpty(char)) return false;\n  return ROMAJI_RANGES.some(([start, end]) => isCharInRange(char, start, end));\n}\n\nexport default isCharRomaji;\n","import typeOf from './utils/typeOf';\nimport isEmpty from './utils/isEmpty';\nimport isCharRomaji from './utils/isCharRomaji';\n\n/**\n * Test if `input` is [Romaji](https://en.wikipedia.org/wiki/Romaji) (allowing [Hepburn romanisation](https://en.wikipedia.org/wiki/Hepburn_romanization))\n * @param  {String} [input=''] text\n * @param  {Regexp} [allowed] additional test allowed to pass for each char\n * @return {Boolean} true if [Romaji](https://en.wikipedia.org/wiki/Romaji)\n * @example\n * isRomaji('Tōkyō and Ōsaka')\n * // => true\n * isRomaji('12a*b&c-d')\n * // => true\n * isRomaji('あアA')\n * // => false\n * isRomaji('お願い')\n * // => false\n * isRomaji('a！b&cーd') // Zenkaku punctuation fails\n * // => false\n * isRomaji('a！b&cーd', /[！ー]/)\n * // => true\n */\nfunction isRomaji(input = '', allowed) {\n  const augmented = typeOf(allowed) === 'regexp';\n  return isEmpty(input)\n    ? false\n    : [...input].every((char) => {\n      const isRoma = isCharRomaji(char);\n      return !augmented ? isRoma : isRoma || allowed.test(char);\n    });\n}\n\nexport default isRomaji;\n","import {\n  KATAKANA_START,\n  KATAKANA_END,\n} from '../constants';\n\nimport isCharInRange from './isCharInRange';\n\n/**\n * Tests a character. Returns true if the character is [Katakana](https://en.wikipedia.org/wiki/Katakana).\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharKatakana(char = '') {\n  return isCharInRange(char, KATAKANA_START, KATAKANA_END);\n}\n\nexport default isCharKatakana;\n","import isEmpty from './utils/isEmpty';\nimport isCharHiragana from './utils/isCharHiragana';\n\n/**\n * Test if `input` is [Hiragana](https://en.wikipedia.org/wiki/Hiragana)\n * @param  {String} [input=''] text\n * @return {Boolean} true if all [Hiragana](https://en.wikipedia.org/wiki/Hiragana)\n * @example\n * isHiragana('げーむ')\n * // => true\n * isHiragana('A')\n * // => false\n * isHiragana('あア')\n * // => false\n */\nfunction isHiragana(input = '') {\n  if (isEmpty(input)) return false;\n  return [...input].every(isCharHiragana);\n}\n\nexport default isHiragana;\n","import isEmpty from './utils/isEmpty';\nimport isCharKatakana from './utils/isCharKatakana';\n\n/**\n * Test if `input` is [Katakana](https://en.wikipedia.org/wiki/Katakana)\n * @param  {String} [input=''] text\n * @return {Boolean} true if all [Katakana](https://en.wikipedia.org/wiki/Katakana)\n * @example\n * isKatakana('ゲーム')\n * // => true\n * isKatakana('あ')\n * // => false\n * isKatakana('A')\n * // => false\n * isKatakana('あア')\n * // => false\n */\nfunction isKatakana(input = '') {\n  if (isEmpty(input)) return false;\n  return [...input].every(isCharKatakana);\n}\n\nexport default isKatakana;\n","import {\n  KANJI_START,\n  KANJI_END,\n} from '../constants';\n\nimport isCharInRange from './isCharInRange';\n/**\n * Tests a character. Returns true if the character is a CJK ideograph (kanji).\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharKanji(char = '') {\n  return isCharInRange(char, KANJI_START, KANJI_END);\n}\n\nexport default isCharKanji;\n","import isEmpty from './utils/isEmpty';\nimport isCharKanji from './utils/isCharKanji';\n\n/**\n * Tests if `input` is [Kanji](https://en.wikipedia.org/wiki/Kanji) ([Japanese CJK ideographs](https://en.wikipedia.org/wiki/CJK_Unified_Ideographs))\n * @param  {String} [input=''] text\n * @return {Boolean} true if all [Kanji](https://en.wikipedia.org/wiki/Kanji)\n * @example\n * isKanji('刀')\n * // => true\n * isKanji('切腹')\n * // => true\n * isKanji('勢い')\n * // => false\n * isKanji('あAア')\n * // => false\n * isKanji('🐸')\n * // => false\n */\nfunction isKanji(input = '') {\n  if (isEmpty(input)) return false;\n  return [...input].every(isCharKanji);\n}\n\nexport default isKanji;\n","import isKanji from './isKanji';\nimport isHiragana from './isHiragana';\nimport isKatakana from './isKatakana';\nimport isRomaji from './isRomaji';\n\n/**\n * Test if `input` contains a mix of [Romaji](https://en.wikipedia.org/wiki/Romaji) *and* [Kana](https://en.wikipedia.org/wiki/Kana), defaults to pass through [Kanji](https://en.wikipedia.org/wiki/Kanji)\n * @param  {String} input text\n * @param  {Object} [options={ passKanji: true }] optional config to pass through kanji\n * @return {Boolean} true if mixed\n * @example\n * isMixed('Abあア'))\n * // => true\n * isMixed('お腹A')) // ignores kanji by default\n * // => true\n * isMixed('お腹A', { passKanji: false }))\n * // => false\n * isMixed('ab'))\n * // => false\n * isMixed('あア'))\n * // => false\n */\nfunction isMixed(input = '', options = { passKanji: true }) {\n  const chars = [...input];\n  let hasKanji = false;\n  if (!options.passKanji) {\n    hasKanji = chars.some(isKanji);\n  }\n  return (chars.some(isHiragana) || chars.some(isKatakana)) && chars.some(isRomaji) && !hasKanji;\n}\n\nexport default isMixed;\n","import { KATAKANA_START, HIRAGANA_START } from '../constants';\n\nimport isCharLongDash from './isCharLongDash';\nimport isCharSlashDot from './isCharSlashDot';\nimport isCharKatakana from './isCharKatakana';\nconst isCharInitialLongDash = (char, index) => isCharLongDash(char) && index < 1;\nconst isCharInnerLongDash = (char, index) => isCharLongDash(char) && index > 0;\nconst isKanaAsSymbol = (char) => ['ヶ', 'ヵ'].includes(char);\nconst LONG_VOWELS = {\n  a: 'あ',\n  i: 'い',\n  u: 'う',\n  e: 'え',\n  o: 'う',\n};\n\n// inject toRomaji to avoid circular dependency between toRomaji <-> katakanaToHiragana\nfunction katakanaToHiragana(\n  input = '',\n  toRomaji,\n  { isDestinationRomaji, convertLongVowelMark } = {}\n) {\n  let previousKana = '';\n\n  return input\n    .split('')\n    .reduce((hira, char, index) => {\n      // Short circuit to avoid incorrect codeshift for 'ー' and '・'\n      if (\n        isCharSlashDot(char)\n        || isCharInitialLongDash(char, index)\n        || isKanaAsSymbol(char)\n      ) {\n        return hira.concat(char);\n      }\n\n      // Transform long vowels: 'オー' to 'おう'\n      if (\n        convertLongVowelMark\n        && previousKana\n        && isCharInnerLongDash(char, index)\n      ) {\n        // Transform previousKana back to romaji, and slice off the vowel\n        const romaji = toRomaji(previousKana).slice(-1);\n        // However, ensure 'オー' => 'おお' => 'oo' if this is a transform on the way to romaji\n        if (\n          isCharKatakana(input[index - 1])\n          && romaji === 'o'\n          && isDestinationRomaji\n        ) {\n          return hira.concat('お');\n        }\n        return hira.concat(LONG_VOWELS[romaji]);\n        // Transform all other chars\n      }\n\n      if (!isCharLongDash(char) && isCharKatakana(char)) {\n        const code = char.charCodeAt(0) + (HIRAGANA_START - KATAKANA_START);\n        const hiraChar = String.fromCharCode(code);\n        previousKana = hiraChar;\n        return hira.concat(hiraChar);\n      }\n\n      // Pass non katakana chars through\n      previousKana = '';\n      return hira.concat(char);\n    }, [])\n    .join('');\n}\n\nexport default katakanaToHiragana;\n","import { transform, getSubTreeOf } from './kanaMapping';\nimport { ROMANIZATIONS } from '../constants';\n\nlet kanaToHepburnMap = null;\n\n/* eslint-disable */\n// prettier-ignore\nconst BASIC_ROMAJI = {\n  あ:'a',    い:'i',   う:'u',   え:'e',    お:'o',\n  か:'ka',   き:'ki',  く:'ku',  け:'ke',   こ:'ko',\n  さ:'sa',   し:'shi', す:'su',  せ:'se',   そ:'so',\n  た:'ta',   ち:'chi', つ:'tsu', て:'te',   と:'to',\n  な:'na',   に:'ni',  ぬ:'nu',  ね:'ne',   の:'no',\n  は:'ha',   ひ:'hi',  ふ:'fu',  へ:'he',   ほ:'ho',\n  ま:'ma',   み:'mi',  む:'mu',  め:'me',   も:'mo',\n  ら:'ra',   り:'ri',  る:'ru',  れ:'re',   ろ:'ro',\n  や:'ya',   ゆ:'yu',  よ:'yo',\n  わ:'wa',   ゐ:'wi',  ゑ:'we',  を:'wo',\n  ん: 'n',\n  が:'ga',   ぎ:'gi',  ぐ:'gu',  げ:'ge',   ご:'go',\n  ざ:'za',   じ:'ji',  ず:'zu',  ぜ:'ze',   ぞ:'zo',\n  だ:'da',   ぢ:'ji',  づ:'zu',  で:'de',   ど:'do',\n  ば:'ba',   び:'bi',  ぶ:'bu',  べ:'be',   ぼ:'bo',\n  ぱ:'pa',   ぴ:'pi',  ぷ:'pu',  ぺ:'pe',   ぽ:'po',\n  ゔぁ:'va', ゔぃ:'vi', ゔ:'vu',  ゔぇ:'ve', ゔぉ:'vo',\n};\n/* eslint-enable  */\n\nconst SPECIAL_SYMBOLS = {\n  '。': '.',\n  '、': ',',\n  '：': ':',\n  '・': '/',\n  '！': '!',\n  '？': '?',\n  '〜': '~',\n  'ー': '-',\n  '「': '‘',\n  '」': '’',\n  '『': '“',\n  '』': '”',\n  '［': '[',\n  '］': ']',\n  '（': '(',\n  '）': ')',\n  '｛': '{',\n  '｝': '}',\n  '　': ' ',\n};\n\n// んい -> n'i\nconst AMBIGUOUS_VOWELS = ['あ', 'い', 'う', 'え', 'お', 'や', 'ゆ', 'よ'];\nconst SMALL_Y = { ゃ: 'ya', ゅ: 'yu', ょ: 'yo' };\nconst SMALL_Y_EXTRA = { ぃ: 'yi', ぇ: 'ye' };\nconst SMALL_AIUEO = {\n  ぁ: 'a',\n  ぃ: 'i',\n  ぅ: 'u',\n  ぇ: 'e',\n  ぉ: 'o',\n};\nconst YOON_KANA = [\n  'き',\n  'に',\n  'ひ',\n  'み',\n  'り',\n  'ぎ',\n  'び',\n  'ぴ',\n  'ゔ',\n  'く',\n  'ふ',\n];\nconst YOON_EXCEPTIONS = {\n  し: 'sh',\n  ち: 'ch',\n  じ: 'j',\n  ぢ: 'j',\n};\nconst SMALL_KANA = {\n  っ: '',\n  ゃ: 'ya',\n  ゅ: 'yu',\n  ょ: 'yo',\n  ぁ: 'a',\n  ぃ: 'i',\n  ぅ: 'u',\n  ぇ: 'e',\n  ぉ: 'o',\n};\n\n// going with the intuitive (yet incorrect) solution where っや -> yya and っぃ -> ii\n// in other words, just assume the sokuon could have been applied to anything\nconst SOKUON_WHITELIST = {\n  b: 'b',\n  c: 't',\n  d: 'd',\n  f: 'f',\n  g: 'g',\n  h: 'h',\n  j: 'j',\n  k: 'k',\n  m: 'm',\n  p: 'p',\n  q: 'q',\n  r: 'r',\n  s: 's',\n  t: 't',\n  v: 'v',\n  w: 'w',\n  x: 'x',\n  z: 'z',\n};\n\nfunction getKanaToHepburnTree() {\n  if (kanaToHepburnMap == null) {\n    kanaToHepburnMap = createKanaToHepburnMap();\n  }\n  return kanaToHepburnMap;\n}\n\nexport function getKanaToRomajiTree(romanization) {\n  switch (romanization) {\n    case ROMANIZATIONS.HEPBURN:\n      return getKanaToHepburnTree();\n    default:\n      return {};\n  }\n}\n\nfunction createKanaToHepburnMap() {\n  const romajiTree = transform(BASIC_ROMAJI);\n\n  const subtreeOf = (string) => getSubTreeOf(romajiTree, string);\n  const setTrans = (string, transliteration) => {\n    subtreeOf(string)[''] = transliteration;\n  };\n\n  Object.entries(SPECIAL_SYMBOLS).forEach(([jsymbol, symbol]) => {\n    subtreeOf(jsymbol)[''] = symbol;\n  });\n\n  [...Object.entries(SMALL_Y), ...Object.entries(SMALL_AIUEO)].forEach(\n    ([roma, kana]) => {\n      setTrans(roma, kana);\n    }\n  );\n\n  // きゃ -> kya\n  YOON_KANA.forEach((kana) => {\n    const firstRomajiChar = subtreeOf(kana)[''][0];\n    Object.entries(SMALL_Y).forEach(([yKana, yRoma]) => {\n      setTrans(kana + yKana, firstRomajiChar + yRoma);\n    });\n    // きぃ -> kyi\n    Object.entries(SMALL_Y_EXTRA).forEach(([yKana, yRoma]) => {\n      setTrans(kana + yKana, firstRomajiChar + yRoma);\n    });\n  });\n\n  Object.entries(YOON_EXCEPTIONS).forEach(([kana, roma]) => {\n    // じゃ -> ja\n    Object.entries(SMALL_Y).forEach(([yKana, yRoma]) => {\n      setTrans(kana + yKana, roma + yRoma[1]);\n    });\n    // じぃ -> jyi, じぇ -> je\n    setTrans(`${kana}ぃ`, `${roma}yi`);\n    setTrans(`${kana}ぇ`, `${roma}e`);\n  });\n\n  romajiTree['っ'] = resolveTsu(romajiTree);\n\n  Object.entries(SMALL_KANA).forEach(([kana, roma]) => {\n    setTrans(kana, roma);\n  });\n\n  AMBIGUOUS_VOWELS.forEach((kana) => {\n    setTrans(`ん${kana}`, `n'${subtreeOf(kana)['']}`);\n  });\n\n  // NOTE: could be re-enabled with an option?\n  // // んば -> mbo\n  // const LABIAL = [\n  //   'ば', 'び', 'ぶ', 'べ', 'ぼ',\n  //   'ぱ', 'ぴ', 'ぷ', 'ぺ', 'ぽ',\n  //   'ま', 'み', 'む', 'め', 'も',\n  // ];\n  // LABIAL.forEach((kana) => {\n  //   setTrans(`ん${kana}`, `m${subtreeOf(kana)['']}`);\n  // });\n\n  return Object.freeze(JSON.parse(JSON.stringify(romajiTree)));\n}\n\nfunction resolveTsu(tree) {\n  return Object.entries(tree).reduce((tsuTree, [key, value]) => {\n    if (!key) {\n      // we have reached the bottom of this branch\n      const consonant = value.charAt(0);\n      // eslint-disable-next-line no-param-reassign\n      tsuTree[key] = Object.keys(SOKUON_WHITELIST).includes(consonant)\n        ? SOKUON_WHITELIST[consonant] + value\n        : value;\n    } else {\n      // more subtrees\n      // eslint-disable-next-line no-param-reassign\n      tsuTree[key] = resolveTsu(value);\n    }\n    return tsuTree;\n  }, {});\n}\n","import memoizeOne from 'memoize-one';\nimport { dequal } from 'dequal';\n\nimport mergeWithDefaultOptions from './utils/mergeWithDefaultOptions';\nimport katakanaToHiragana from './utils/katakanaToHiragana';\nimport isKatakana from './isKatakana';\nimport { getKanaToRomajiTree } from './utils/kanaToRomajiMap';\nimport { applyMapping, mergeCustomMapping } from './utils/kanaMapping';\n\n// memoize and deeply compare args so we only recreate when necessary\nexport const createKanaToRomajiMap = memoizeOne(\n  (romanization, customRomajiMapping) => {\n    let map = getKanaToRomajiTree(romanization);\n\n    if (customRomajiMapping) {\n      map = mergeCustomMapping(map, customRomajiMapping);\n    }\n\n    return map;\n  },\n  dequal\n);\n\n/**\n * Convert kana to romaji\n * @param  {String} kana text input\n * @param  {DefaultOptions} [options=defaultOptions]\n * @param  {Object} map custom mapping\n * @return {String} converted text\n * @example\n * toRomaji('ひらがな　カタカナ')\n * // => 'hiragana katakana'\n * toRomaji('げーむ　ゲーム')\n * // => 'ge-mu geemu'\n * toRomaji('ひらがな　カタカナ', { upcaseKatakana: true })\n * // => 'hiragana KATAKANA'\n * toRomaji('つじぎり', { customRomajiMapping: { じ: 'zi', つ: 'tu', り: 'li' } });\n * // => 'tuzigili'\n */\nexport function toRomaji(input = '', options = {}, map) {\n  const config = mergeWithDefaultOptions(options);\n\n  if (!map) {\n    map = createKanaToRomajiMap(\n      config.romanization,\n      config.customRomajiMapping\n    );\n  }\n\n  // just throw away the substring index information and simply concatenate all the kana\n  return splitIntoRomaji(input, config, map)\n    .map((romajiToken) => {\n      const [start, end, romaji] = romajiToken;\n      const makeUpperCase = config.upcaseKatakana && isKatakana(input.slice(start, end));\n      return makeUpperCase ? romaji.toUpperCase() : romaji;\n    })\n    .join('');\n}\n\nfunction splitIntoRomaji(input, options, map) {\n  if (!map) {\n    map = createKanaToRomajiMap(\n      options.romanization,\n      options.customRomajiMapping\n    );\n  }\n\n  const config = Object.assign({}, { isDestinationRomaji: true }, options);\n\n  return applyMapping(\n    katakanaToHiragana(input, toRomaji, config),\n    map,\n    !options.IMEMode\n  );\n}\n\nexport default toRomaji;\n","import isEmpty from './isEmpty';\nimport { EN_PUNCTUATION_RANGES } from '../constants';\nimport isCharInRange from './isCharInRange';\n\n/**\n * Tests a character. Returns true if the character is considered English punctuation.\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharEnglishPunctuation(char = '') {\n  if (isEmpty(char)) return false;\n  return EN_PUNCTUATION_RANGES.some(([start, end]) => isCharInRange(char, start, end));\n}\n\nexport default isCharEnglishPunctuation;\n","import mergeWithDefaultOptions from './utils/mergeWithDefaultOptions';\nimport katakanaToHiragana from './utils/katakanaToHiragana';\nimport isCharEnglishPunctuation from './utils/isCharEnglishPunctuation';\nimport isRomaji from './isRomaji';\nimport isMixed from './isMixed';\nimport toKana from './toKana';\nimport toRomaji from './toRomaji';\n\n/**\n * Convert input to [Hiragana](https://en.wikipedia.org/wiki/Hiragana)\n * @param  {String} [input=''] text\n * @param  {DefaultOptions} [options=defaultOptions]\n * @return {String} converted text\n * @example\n * toHiragana('toukyou, オオサカ')\n * // => 'とうきょう、　おおさか'\n * toHiragana('only カナ', { passRomaji: true })\n * // => 'only かな'\n * toHiragana('wi')\n * // => 'うぃ'\n * toHiragana('wi', { useObsoleteKana: true })\n * // => 'ゐ'\n */\nfunction toHiragana(input = '', options = {}) {\n  const config = mergeWithDefaultOptions(options);\n  if (config.passRomaji) {\n    return katakanaToHiragana(input, toRomaji, config);\n  }\n\n  if (isMixed(input, { passKanji: true })) {\n    const convertedKatakana = katakanaToHiragana(input, toRomaji, config);\n    return toKana(convertedKatakana.toLowerCase(), config);\n  }\n\n  if (isRomaji(input) || isCharEnglishPunctuation(input)) {\n    return toKana(input.toLowerCase(), config);\n  }\n\n  return katakanaToHiragana(input, toRomaji, config);\n}\n\nexport default toHiragana;\n","import mergeWithDefaultOptions from './utils/mergeWithDefaultOptions';\nimport hiraganaToKatakana from './utils/hiraganaToKatakana';\nimport isCharEnglishPunctuation from './utils/isCharEnglishPunctuation';\nimport toKana from './toKana';\nimport isRomaji from './isRomaji';\nimport isMixed from './isMixed';\n\n/**\n * Convert input to [Katakana](https://en.wikipedia.org/wiki/Katakana)\n * @param  {String} [input=''] text\n * @param  {DefaultOptions} [options=defaultOptions]\n * @return {String} converted text\n * @example\n * toKatakana('toukyou, おおさか')\n * // => 'トウキョウ、　オオサカ'\n * toKatakana('only かな', { passRomaji: true })\n * // => 'only カナ'\n * toKatakana('wi')\n * // => 'ウィ'\n * toKatakana('wi', { useObsoleteKana: true })\n * // => 'ヰ'\n */\nfunction toKatakana(input = '', options = {}) {\n  const mergedOptions = mergeWithDefaultOptions(options);\n  if (mergedOptions.passRomaji) {\n    return hiraganaToKatakana(input);\n  }\n\n  if (isMixed(input) || isRomaji(input) || isCharEnglishPunctuation(input)) {\n    const hiragana = toKana(input.toLowerCase(), mergedOptions);\n    return hiraganaToKatakana(hiragana);\n  }\n\n  return hiraganaToKatakana(input);\n}\n\nexport default toKatakana;\n","// Kana\r\nexport const allKanaObject = {\r\n  a: [\"a\", \"i\", \"u\", \"e\", \"o\"],\r\n  ka: [\"ka\", \"ki\", \"ku\", \"ke\", \"ko\"],\r\n  sa: [\"sa\", \"shi\", \"su\", \"se\", \"so\"],\r\n  ta: [\"ta\", \"chi\", \"tsu\", \"te\", \"to\"],\r\n  na: [\"na\", \"ni\", \"nu\", \"ne\", \"no\"],\r\n  ha: [\"ha\", \"hi\", \"fu\", \"he\", \"ho\"],\r\n  ma: [\"ma\", \"mi\", \"mu\", \"me\", \"mo\"],\r\n  ya: [\"ya\", \"yu\", \"yo\"],\r\n  ra: [\"ra\", \"ri\", \"ru\", \"re\", \"ro\"],\r\n  wa: [\"wa\", \"wo\", \"n\"],\r\n  ga: [\"ga\", \"gi\", \"gu\", \"ge\", \"go\"],\r\n  za: [\"za\", \"ji\", \"zu\", \"ze\", \"zo\"],\r\n  da: [\"da\", \"zi\", \"zu\", \"de\", \"do\"],\r\n  ba: [\"ba\", \"bi\", \"bu\", \"be\", \"bo\"],\r\n  pa: [\"pa\", \"pi\", \"pu\", \"pe\", \"po\"],\r\n  kya: [\"kya\", \"kyu\", \"kyo\"],\r\n  gya: [\"gya\", \"gyu\", \"gyo\"],\r\n  sha: [\"sha\", \"shu\", \"sho\"],\r\n  ja: [\"jya\", \"jyu\", \"jyo\"],\r\n  cha: [\"cha\", \"chu\", \"cho\"],\r\n  dya: [\"dya\", \"dyu\", \"dyo\"],\r\n  nya: [\"nya\", \"nyu\", \"nyo\"],\r\n  hya: [\"hya\", \"hyu\", \"hyo\"],\r\n  bya: [\"bya\", \"byu\", \"byo\"],\r\n  pya: [\"pya\", \"pyu\", \"pyo\"],\r\n  mya: [\"mya\", \"myu\", \"myo\"],\r\n  rya: [\"rya\", \"ryu\", \"ryo\"],\r\n};\r\n","export const shuffleArray = (array) => {\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    const temp = array[i];\r\n    array[i] = array[j];\r\n    array[j] = temp;\r\n  }\r\n  return array;\r\n};\r\n","import { toHiragana, toKatakana } from \"wanakana\";\r\n\r\nlet quizBoxInputElementsArray = [];\r\n\r\nexport function getQuizBoxInputsEvents() {\r\n  quizBoxInputElementsArray = document.querySelectorAll(\".quiz-box-input\");\r\n\r\n  quizBoxInputElementsArray.forEach((inputElement) => {\r\n    inputElement.addEventListener(\"keydown\", function (event) {\r\n      if (event.key === \"Enter\" || event.key === \"Tab\") {\r\n        checkAnswer(inputElement);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction checkAnswer(inputElement) {\r\n  if (\r\n    toHiragana(inputElement.value) ===\r\n      inputElement.parentElement.children[0].textContent ||\r\n    toKatakana(inputElement.value) ===\r\n      inputElement.parentElement.children[0].textContent\r\n  ) {\r\n    inputElement.parentElement.classList.remove(\"wrong\");\r\n    inputElement.parentElement.classList.add(\"correct\");\r\n  } else {\r\n    inputElement.parentElement.classList.add(\"wrong\");\r\n    inputElement.parentElement.classList.remove(\"correct\");\r\n  }\r\n}\r\n","import { toHiragana, toKatakana } from \"wanakana\";\r\nimport { allKanaObject } from \"./data\";\r\nimport { shuffleArray } from \"./shuffle\";\r\nimport { getQuizBoxInputsEvents } from \"./checkAnswer\";\r\n\r\n// ******* Selectors *******\r\nlet kanaColumnButtonElements;\r\nlet selectAllButtonElements;\r\nlet mainColumnKanaButtonElements;\r\nlet dakutenColumnKanaButtonElements;\r\nlet combinationColumnKanaButtonElements;\r\n\r\nlet hiraganaOptionButtonElement;\r\nlet katakanaOptionButtonElement;\r\nlet startQuizButtonElement;\r\nconst mainHtmlElement = document.querySelector(\".main\");\r\nconst titleElement = document.querySelector(\".title\");\r\nconst instructionsElement = document.querySelector(\".instructions\");\r\n\r\nconst quizBoxesListElement = document.querySelector(\".quiz-boxes-list\");\r\n\r\n// ******* Variables *******\r\nlet selectedKanasArray = [];\r\nlet isHiragana = true;\r\n\r\n// ******* Init *******\r\ndisplayHomePage();\r\n\r\n// ******* Functions *******\r\n// Function for getting an array of user selected kana columns\r\nfunction getSelectedKanas() {\r\n  kanaColumnButtonElements = document.querySelectorAll(\r\n    \".column-options-grid--button\"\r\n  );\r\n  kanaColumnButtonElements.forEach((checkedColumn) => {\r\n    if (checkedColumn.classList.contains(\"checked-column\")) {\r\n      selectedKanasArray.push(allKanaObject[`${checkedColumn.dataset.column}`]);\r\n    }\r\n  });\r\n  selectedKanasArray = selectedKanasArray.flat();\r\n}\r\n\r\n// Function for generating markup for individual quiz-boxes\r\nfunction generateMarkup(kana) {\r\n  return `\r\n    <li class=\"quiz-box\">\r\n      <label class=\"quiz-box-label\">${\r\n        isHiragana === true ? toHiragana(kana) : toKatakana(kana)\r\n      }</label>\r\n        <input\r\n          class=\"quiz-box-input\"\r\n          type=\"text\"\r\n          maxlength=\"3\"\r\n          minlength=\"1\"\r\n        />\r\n    </li>\r\n  `;\r\n}\r\n\r\n// Function for inserting quiz-boxes of shuffled selected kanas in list element\r\nfunction displayQuizBoxes() {\r\n  getSelectedKanas();\r\n  if (selectedKanasArray.length !== 0) {\r\n    deleteHomePage();\r\n    shuffleArray(selectedKanasArray);\r\n    selectedKanasArray.forEach((kana) => {\r\n      quizBoxesListElement.insertAdjacentHTML(\r\n        \"beforeend\",\r\n        generateMarkup(kana)\r\n      );\r\n    });\r\n    getQuizBoxInputsEvents();\r\n\r\n    instructionsElement.textContent =\r\n      \"Escreva o Romaji na caixa de texto e aperte Enter ou Tab. Se errar, você pode continuar tentando. Clique no título acima para retornar à página inicial.\";\r\n  } else {\r\n    alert(\"Selecione uma das colunas para continuar!\");\r\n  }\r\n}\r\n\r\nfunction deleteQuizPage() {\r\n  mainHtmlElement.children[0].children[0].innerHTML = \"\";\r\n  selectedKanasArray = [];\r\n}\r\n\r\nfunction deleteHomePage() {\r\n  mainHtmlElement.children[0].remove();\r\n}\r\n\r\nfunction displayHomePage() {\r\n  const markup = `\r\n      <section class=\"select-box-section\">\r\n        <div class=\"kana-option-buttons\">\r\n          <button class=\"kana-option-buttons--hiragana checked-kana\">\r\n            Pratique Hiragana\r\n          </button>\r\n          <button class=\"kana-option-buttons--katakana \">Pratique Katakana</button>\r\n        </div>\r\n        <div class=\"kana-column-options\">\r\n          <div>\r\n            <h2 class=\"kana-column-options--title\">Kana Principal</h2>\r\n            <button class=\"select-all-button\">Selecionar Todos</button>\r\n            <div class=\"column-options-grid\">\r\n              <button class=\"main-column column-options-grid--button\" data-column=\"a\">\r\n              ${toHiragana(\"a\")} / ${toKatakana(\"a\")} / a\r\n              </button>\r\n              <button class=\"main-column column-options-grid--button\" data-column=\"ka\">\r\n              ${toHiragana(\"ka\")} / ${toKatakana(\"ka\")} / ka\r\n              </button>\r\n              <button class=\"main-column column-options-grid--button\" data-column=\"sa\">\r\n              ${toHiragana(\"sa\")} / ${toKatakana(\"sa\")} / sa\r\n              </button>\r\n              <button class=\"main-column column-options-grid--button\" data-column=\"ta\">\r\n              ${toHiragana(\"ta\")} / ${toKatakana(\"ta\")} / ta\r\n              </button>\r\n              <button class=\"main-column column-options-grid--button\" data-column=\"na\">\r\n              ${toHiragana(\"na\")} / ${toKatakana(\"na\")} / na\r\n              </button>\r\n              <button class=\"main-column column-options-grid--button\" data-column=\"ha\">\r\n              ${toHiragana(\"ha\")} / ${toKatakana(\"ha\")} / ha\r\n              </button>\r\n              <button class=\"main-column column-options-grid--button\" data-column=\"ma\">\r\n              ${toHiragana(\"ma\")} / ${toKatakana(\"ma\")} / ma\r\n              </button>\r\n              <button class=\"main-column column-options-grid--button\" data-column=\"ya\">\r\n              ${toHiragana(\"ya\")} / ${toKatakana(\"ya\")} / ya\r\n              </button>\r\n              <button class=\"main-column column-options-grid--button\" data-column=\"ra\">\r\n              ${toHiragana(\"ra\")} / ${toKatakana(\"ra\")} / ra\r\n              </button>\r\n              <button class=\"main-column column-options-grid--button\" data-column=\"wa\">\r\n              ${toHiragana(\"wa\")} / ${toKatakana(\"wa\")} / wa\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <h2 class=\"kana-column-options--title\">Kana Dakuten</h2>\r\n            <button class=\"select-all-button\">Selecionar Todos</button>\r\n            <div class=\"column-options-grid\">\r\n              <button class=\"dakuten-column column-options-grid--button\" data-column=\"ga\">\r\n              ${toHiragana(\"ga\")} / ${toKatakana(\"ga\")} / ga\r\n              </button>\r\n              <button class=\"dakuten-column column-options-grid--button\" data-column=\"za\">\r\n              ${toHiragana(\"za\")} / ${toKatakana(\"za\")} / za\r\n              </button>\r\n              <button class=\"dakuten-column column-options-grid--button\" data-column=\"da\">\r\n              ${toHiragana(\"da\")} / ${toKatakana(\"da\")} / da\r\n              </button>\r\n              <button class=\"dakuten-column column-options-grid--button\" data-column=\"ba\">\r\n              ${toHiragana(\"ba\")} / ${toKatakana(\"ba\")} / ba\r\n              </button>\r\n              <button class=\"dakuten-column column-options-grid--button\" data-column=\"pa\">\r\n              ${toHiragana(\"pa\")} / ${toKatakana(\"pa\")} / pa\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <h2 class=\"kana-column-options--title\">Combinações Kana</h2>\r\n            <button class=\"select-all-button\">Selecionar Todos</button>\r\n            <div class=\"column-options-grid\">\r\n              <button\r\n                class=\"combination-column column-options-grid--button\"\r\n                data-column=\"kya\"\r\n              >\r\n              ${toHiragana(\"kya\")} / ${toKatakana(\"kya\")} / kya\r\n              </button>\r\n              <button\r\n                class=\"combination-column column-options-grid--button\"\r\n                data-column=\"cha\"\r\n              >\r\n              ${toHiragana(\"cha\")} / ${toKatakana(\"cha\")} / cha\r\n              </button>\r\n              <button\r\n                class=\"combination-column column-options-grid--button\"\r\n                data-column=\"hya\"\r\n              >\r\n              ${toHiragana(\"hya\")} / ${toKatakana(\"hya\")} / hya\r\n              </button>\r\n              <button\r\n                class=\"combination-column column-options-grid--button\"\r\n                data-column=\"rya\"\r\n              >\r\n              ${toHiragana(\"rya\")} / ${toKatakana(\"rya\")} / rya\r\n              </button>\r\n              <button class=\"combination-column column-options-grid--button\" data-column=\"ja\">\r\n              ${toHiragana(\"ja\")} / ${toKatakana(\"ja\")} / ja\r\n              </button>\r\n              <button\r\n                class=\"combination-column column-options-grid--button\"\r\n                data-column=\"bya\"\r\n              >\r\n              ${toHiragana(\"bya\")} / ${toKatakana(\"bya\")} / bya\r\n              </button>\r\n              <button\r\n                class=\"combination-column column-options-grid--button\"\r\n                data-column=\"sha\"\r\n              >\r\n              ${toHiragana(\"sha\")} / ${toKatakana(\"sha\")} / sha\r\n              </button>\r\n              <button\r\n                class=\"combination-column column-options-grid--button\"\r\n                data-column=\"nya\"\r\n              >\r\n              ${toHiragana(\"nya\")} / ${toKatakana(\"nya\")} / nya\r\n              </button>\r\n              <button\r\n                class=\"combination-column column-options-grid--button\"\r\n                data-column=\"mya\"\r\n              >\r\n              ${toHiragana(\"mya\")} / ${toKatakana(\"mya\")} / mya\r\n              </button>\r\n              <button\r\n                class=\"combination-column column-options-grid--button\"\r\n                data-column=\"gya\"\r\n              >\r\n              ${toHiragana(\"gya\")} / ${toKatakana(\"gya\")} / gya\r\n              </button>\r\n              <button\r\n                class=\"combination-column column-options-grid--button\"\r\n                data-column=\"dya\"\r\n              >\r\n              ${toHiragana(\"dya\")} / ${toKatakana(\"dya\")} / dya\r\n              </button>\r\n              <button\r\n                class=\"combination-column column-options-grid--button\"\r\n                data-column=\"pya\"\r\n              >\r\n              ${toHiragana(\"pya\")} / ${toKatakana(\"pya\")} / pya\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <button class=\"start-quiz-button\">Começar o Quiz!</button>\r\n      </section>\r\n      `;\r\n\r\n  mainHtmlElement.insertAdjacentHTML(\"afterbegin\", markup);\r\n  generateHomePageEvents();\r\n\r\n  isHiragana = true;\r\n  instructionsElement.textContent =\r\n    \"Selecione qual silabário deseja praticar e quais colunas. Recomendamos que pratique uma coluna por vez e adicione mais conforme evolua.\";\r\n}\r\n\r\nfunction generateHomePageEvents() {\r\n  // ****** Selectors ******\r\n  kanaColumnButtonElements = document.querySelectorAll(\r\n    \".column-options-grid--button\"\r\n  );\r\n  selectAllButtonElements = document.querySelectorAll(\".select-all-button\");\r\n  mainColumnKanaButtonElements = document.querySelectorAll(\".main-column\");\r\n  dakutenColumnKanaButtonElements =\r\n    document.querySelectorAll(\".dakuten-column\");\r\n  combinationColumnKanaButtonElements = document.querySelectorAll(\r\n    \".combination-column\"\r\n  );\r\n\r\n  hiraganaOptionButtonElement = document.querySelector(\r\n    \".kana-option-buttons--hiragana\"\r\n  );\r\n  katakanaOptionButtonElement = document.querySelector(\r\n    \".kana-option-buttons--katakana\"\r\n  );\r\n  startQuizButtonElement = document.querySelector(\".start-quiz-button\");\r\n\r\n  // ****** Event Listeners ******\r\n  // Select all buttons logic for adding checked styles in all buttons from that column\r\n  selectAllButtonElements.forEach((selectAllButton) => {\r\n    selectAllButton.addEventListener(\"click\", function (e) {\r\n      const selectedColumn =\r\n        e.target.nextElementSibling.children[0].classList[0];\r\n\r\n      if (selectedColumn === \"main-column\") {\r\n        e.target.classList.toggle(\"checked-all\");\r\n        mainColumnKanaButtonElements.forEach((button) => {\r\n          button.classList.toggle(\"checked-column\");\r\n        });\r\n      }\r\n\r\n      if (selectedColumn === \"dakuten-column\") {\r\n        e.target.classList.toggle(\"checked-all\");\r\n        dakutenColumnKanaButtonElements.forEach((button) => {\r\n          button.classList.toggle(\"checked-column\");\r\n        });\r\n      }\r\n\r\n      if (selectedColumn === \"combination-column\") {\r\n        e.target.classList.toggle(\"checked-all\");\r\n        combinationColumnKanaButtonElements.forEach((button) => {\r\n          button.classList.toggle(\"checked-column\");\r\n        });\r\n      }\r\n    });\r\n  });\r\n\r\n  // Add checked button style for kana columns buttons\r\n  kanaColumnButtonElements.forEach((kanaColumnButton) => {\r\n    kanaColumnButton.addEventListener(\"click\", function () {\r\n      kanaColumnButton.classList.toggle(\"checked-column\");\r\n    });\r\n  });\r\n\r\n  // Select between Hiragana and Katakana Buttons\r\n  hiraganaOptionButtonElement.addEventListener(\"click\", function () {\r\n    hiraganaOptionButtonElement.classList.add(\"checked-kana\");\r\n    katakanaOptionButtonElement.classList.remove(\"checked-kana\");\r\n    isHiragana = true;\r\n  });\r\n\r\n  katakanaOptionButtonElement.addEventListener(\"click\", function () {\r\n    katakanaOptionButtonElement.classList.add(\"checked-kana\");\r\n    hiraganaOptionButtonElement.classList.remove(\"checked-kana\");\r\n    isHiragana = false;\r\n  });\r\n\r\n  // Start Quiz Button\r\n  startQuizButtonElement.addEventListener(\"click\", displayQuizBoxes);\r\n}\r\n\r\n// ****** Event Listeners ******\r\ntitleElement.addEventListener(\"click\", function () {\r\n  if (!document.querySelector(\".select-box-section\")) {\r\n    deleteQuizPage();\r\n    displayHomePage();\r\n  }\r\n});\r\n"],"names":["$741555d9057b000f$var$typeOf","value","Object","toString","call","slice","toLowerCase","$741555d9057b000f$var$isEmpty","input","length","$741555d9057b000f$var$isCharInRange","char","start","end","code","charCodeAt","$741555d9057b000f$export$4cb93ec9ed11137c","$741555d9057b000f$export$9b45cb7ce8e39e14","$741555d9057b000f$var$DEFAULT_OPTIONS","useObsoleteKana","passRomaji","upcaseKatakana","IMEMode","convertLongVowelMark","romanization","$741555d9057b000f$var$ZENKAKU_UPPERCASE","$741555d9057b000f$var$ZENKAKU_LOWERCASE","$741555d9057b000f$var$KANA_PUNCTUATION","$741555d9057b000f$var$JA_PUNCTUATION_RANGES","$741555d9057b000f$var$ROMAJI_RANGES","$741555d9057b000f$var$EN_PUNCTUATION_RANGES","$741555d9057b000f$var$safeIsNaN","Number","isNaN","$741555d9057b000f$var$areInputsEqual","newInputs","lastInputs","i","first","second","$741555d9057b000f$var$memoizeOne","resultFn","isEqual","cache","memoized","newArgs","_i","arguments","lastThis","this","lastArgs","lastResult","apply","clear","$741555d9057b000f$var$has","prototype","hasOwnProperty","$741555d9057b000f$var$find","iter","tar","key","keys","$741555d9057b000f$var$dequal","foo","bar","ctor","len","tmp","constructor","Date","getTime","RegExp","Array","Set","size","has","Map","get","ArrayBuffer","Uint8Array","DataView","byteLength","getInt8","isView","$741555d9057b000f$var$mergeWithDefaultOptions","opts","assign","$741555d9057b000f$var$applyMapping","string","mapping","convertEnding","root","newChunk","remaining","currentCursor","firstChar","charAt","parse","tree","lastCursor","concat","subtree","nextChar","undefined","nextSubtree","$741555d9057b000f$var$transform","entries","reduce","map","endOfBranch","$741555d9057b000f$var$getSubTreeOf","split","correctSubTree","$741555d9057b000f$var$createCustomMapping","customMap","customTree","forEach","roma","kana","subTree","transformMap","mapSubtree","customSubtree","newSubtree","JSON","stringify","$741555d9057b000f$var$mergeCustomMapping","customMapping","$741555d9057b000f$var$BASIC_KUNREI","a","u","e","o","k","s","t","n","h","m","y","r","w","g","z","d","b","p","v","SPECIAL_SYMBOLS","$741555d9057b000f$var$CONSONANTS","q","f","SMALL_Y","ya","yi","yu","ye","yo","$741555d9057b000f$var$SMALL_VOWELS","$741555d9057b000f$var$ALIASES","sh","ch","cy","chy","shy","j","jy","shi","chi","tsu","ji","fu","$741555d9057b000f$var$SMALL_LETTERS","tu","wa","ka","ke","$741555d9057b000f$var$SPECIAL_CASES","wu","wi","we","kwa","whu","tha","thu","tho","dha","dhu","dho","$741555d9057b000f$var$AIUEO_CONSTRUCTIONS","wh","kw","qw","gw","sw","ts","th","tw","dh","dw","fw","createRomajiToKanaMap","kanaTree","subtreeOf","addTsu","tsuTree","consonant","yKana","symbol","jsymbol","aiueoKana","vowel","nChar","c","alternative","allExceptLast","last","kunreiRoma","chars","xSubtree","list","alt","startsWith","replace","altRoma","prefix","freeze","$741555d9057b000f$var$romajiToKanaMap","$741555d9057b000f$var$USE_OBSOLETE_KANA_MAP","$741555d9057b000f$var$isCharUpperCase","$741555d9057b000f$var$isCharLongDash","$741555d9057b000f$var$isCharSlashDot","$741555d9057b000f$var$isCharHiragana","$741555d9057b000f$var$hiraganaToKatakana","kata","push","kataChar","String","fromCharCode","join","$741555d9057b000f$var$createRomajiToKanaMap","customKanaMapping","mapCopy","$741555d9057b000f$var$IME_MODE_MAP","$741555d9057b000f$export$4973add5c59f0c7b","options","config","$741555d9057b000f$var$splitIntoConvertedKana","kanaToken","enforceHiragana","enforceKatakana","every","$741555d9057b000f$var$isCharRomaji","some","$741555d9057b000f$export$28956e30362f46cb","allowed","augmented","isRoma","test","$741555d9057b000f$var$isCharKatakana","$741555d9057b000f$export$564fffeb22be4c11","$741555d9057b000f$export$9565d2ed9558b472","$741555d9057b000f$var$isCharKanji","$741555d9057b000f$export$92376b026946860f","$741555d9057b000f$export$e534968524b67a52","passKanji","hasKanji","$741555d9057b000f$var$LONG_VOWELS","$741555d9057b000f$var$katakanaToHiragana","toRomaji","isDestinationRomaji","previousKana","hira","index","$741555d9057b000f$var$isCharInitialLongDash","includes","$741555d9057b000f$var$isKanaAsSymbol","$741555d9057b000f$var$isCharInnerLongDash","romaji","hiraChar","$741555d9057b000f$var$kanaToHepburnMap","$741555d9057b000f$var$BASIC_ROMAJI","$741555d9057b000f$var$SPECIAL_SYMBOLS","$741555d9057b000f$var$AMBIGUOUS_VOWELS","$741555d9057b000f$var$SMALL_Y","$741555d9057b000f$var$SMALL_Y_EXTRA","$741555d9057b000f$var$SMALL_AIUEO","$741555d9057b000f$var$YOON_KANA","$741555d9057b000f$var$YOON_EXCEPTIONS","$741555d9057b000f$var$SMALL_KANA","$741555d9057b000f$var$SOKUON_WHITELIST","x","$741555d9057b000f$var$getKanaToHepburnTree","romajiTree","setTrans","transliteration","firstRomajiChar","yRoma","$741555d9057b000f$var$resolveTsu","$741555d9057b000f$var$createKanaToHepburnMap","$741555d9057b000f$var$createKanaToRomajiMap","customRomajiMapping","$741555d9057b000f$var$getKanaToRomajiTree","$741555d9057b000f$export$b0fffd8625644e57","$741555d9057b000f$var$splitIntoRomaji","romajiToken","toUpperCase","$741555d9057b000f$var$isCharEnglishPunctuation","$741555d9057b000f$export$28ab6cab47a15260","$741555d9057b000f$export$a7c1b085022f6eaa","mergedOptions","$2a9f999bc54a0719$export$5cd9b2b34ee0df84","sa","ta","na","ha","ma","ra","ga","za","da","ba","pa","kya","gya","sha","ja","cha","dya","nya","hya","bya","pya","mya","rya","$4dd2bcaee905469a$export$7ac3a88d34a76e7","array","Math","floor","random","temp","$e73bf42412feb220$var$kanaColumnButtonElements","$e73bf42412feb220$var$selectAllButtonElements","$e73bf42412feb220$var$mainColumnKanaButtonElements","$e73bf42412feb220$var$dakutenColumnKanaButtonElements","$e73bf42412feb220$var$combinationColumnKanaButtonElements","$e73bf42412feb220$var$hiraganaOptionButtonElement","$e73bf42412feb220$var$katakanaOptionButtonElement","$e73bf42412feb220$var$startQuizButtonElement","$a7fcb49b195e1eb6$var$quizBoxInputElementsArray","$a7fcb49b195e1eb6$export$a7f6c38dd6171997","document","querySelectorAll","inputElement","addEventListener","event","parentElement","children","textContent","classList","remove","add","$a7fcb49b195e1eb6$var$checkAnswer","$e73bf42412feb220$var$mainHtmlElement","querySelector","$e73bf42412feb220$var$titleElement","$e73bf42412feb220$var$instructionsElement","$e73bf42412feb220$var$quizBoxesListElement","$e73bf42412feb220$var$selectedKanasArray","$e73bf42412feb220$var$isHiragana","$e73bf42412feb220$var$displayQuizBoxes","checkedColumn","contains","dataset","column","flat","insertAdjacentHTML","$e73bf42412feb220$var$generateMarkup","alert","$e73bf42412feb220$var$displayHomePage","markup","innerHTML"],"version":3,"file":"index.68988bfd.js.map"}